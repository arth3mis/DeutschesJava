# Übersetzung für das "java.util.stream" Paket

BaseStream;         BasisStrom
{
    isParallel;         istParallel
    iterator;           wiederholer
    onClose;            beimSchließen
    parallel
    sequential;         sequenziell
    spliterator;        spalterator
    unordered;          ungeordnet
}


DoubleStream;       DoppelStrom
    : BaseStream, ++streams, ++streamsExtra
{
    mapToInt;           abbAufGanz
    mapToLong;          abbAufLang
}

IntStream;          GanzStrom
    : BaseStream, ++streams, ++streamsExtra
{
    $range;             bereich
    $rangeClosed;       bereichZu

    asDoubleStream;     alsDoppelStrom
    asLongStream;       alsLangStrom
    mapToDouble;        abbAufDoppel
    mapToLong;          abbAufLang
}

LongStream;         LangStrom
    : BaseStream, ++streams, ++streamsExtra
{
    $range;             bereich
    $rangeClosed;       bereichZu

    asDoubleStream;     alsDoppelStrom
    mapToDouble;        abbAufDoppel
    mapToInt;           abbAufGanz
}

++streamsExtra
{
    average;            durchschnitt
    boxed;              verpackt
    mapToObj;           abbAufObj
    sum;                summe
}


Stream;             Strom
    : BaseStream, ++streams
{
    $ofNullable;        ausNullbaren

    flatMapToInt;       flachAbbAufGanz
    flatMapToDouble;    flachAbbAufDoppel
    flatMapToLong;      flachAbbAufLang
    mapMultiToInt;      abbMultiAufGanz
    mapMultiToDouble;   abbMultiAufDoppel
    mapMultiToLong;     abbMultiAufLang
    mapToInt;           abbAufGanz
    mapToDouble;        abbAufDoppel
    mapToLong;          abbAufLang
    toList;             zuListe
}

++streams
{
    $Builder;           Bauer                   # interface
        : Consumer
    {
        accept;         akzeptier
        add;            plus
        build;          bau
    }
    $builder;           bauer
    $concat;            verkette
    $empty;             leer
    $generate;          generier
    $iterate;           wiederhol
    $of;                aus

    allMatch;           allesPasst
    anyMatch;           etwasPasst
    collect;            sammel
    count;              anzahl
    distinct;           deutlich
    dropWhile;          tropfWährend
    filter
    findAny;            findeEtwas
    findFirst;          findeErstes
    flatMap;            flachAbb
    forEach;            fürAlle
    forEachOrdered;     fürAlleGeordnet
    limit
    map;                abb                     # abbilden
    mapMulti;           abbMulti
    max
    min
    noneMatch;          nichtsPasst
    peek;               guck
    reduce;             reduzier
    skip;               spring
    sorted;             sortiert
    takeWhile;          nimmWährend
    toArray;            zuReihe
}
